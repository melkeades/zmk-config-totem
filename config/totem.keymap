//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        rus {
            bindings = <&rus>;
            key-positions = <20 31>;
            layers = <0>;
        };

        eng {
            bindings = <&eng>;
            key-positions = <20 31>;
            layers = <5>;
        };

        LeftBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            layers = <0>;
        };

        RightBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            layers = <0>;
        };

        LeftParenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            layers = <0>;
        };

        RightParenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        LeftBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            layers = <0>;
        };

        RightBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <27 28>;
            layers = <0>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <1 2>;
            layers = <0>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <22 23>;
            layers = <0>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
            layers = <0>;
        };

        Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <11 13>;
            layers = <0>;
        };

        QuoteDouble {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 18>;
            layers = <0>;
        };

        QuestionMark {
            bindings = <&kp QUESTION>;
            key-positions = <1 3>;
            layers = <0>;
        };

        Exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <6 8>;
            layers = <0>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <22 24>;
            layers = <0>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <27 29>;
            layers = <0>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <13 11 12>;
            layers = <0>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <16 17 18>;
            layers = <0>;
        };

        AtSign {
            bindings = <&kp AT>;
            key-positions = <12 3>;
            layers = <0>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <6 17>;
            layers = <0>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <11 23>;
            layers = <0>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <28 18>;
            layers = <0>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <23 13>;
            layers = <0>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <16 28>;
            layers = <0>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <1 12>;
            layers = <0>;
        };

        ctrlDel {
            bindings = <&ctrlDel2>;
            key-positions = <11 12>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        ctrlBackspace {
            bindings = <&ctrlBackspace>;
            key-positions = <17 18>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        endDel {
            bindings = <&endDel>;
            key-positions = <21 22>;
            layers = <0>;
        };

        homeBackspace {
            bindings = <&homeBackspace>;
            key-positions = <30 29>;
            layers = <0>;
        };

        homeEndDel {
            bindings = <&homeEndDel>;
            key-positions = <11 12 17 18>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            layers = <0>;
        };

        caps {
            bindings = <&caps_word>;
            key-positions = <18 19>;
            layers = <0>;
        };

        bootloaderL {
            bindings = <&bootloader>;
            key-positions = <33 34 2>;
        };

        bootloaderR {
            bindings = <&bootloader>;
            key-positions = <35 36 7>;
        };

        releaseMods {
            bindings = <&release_mod>;
            key-positions = <2 7>;
        };

        toggleNav {
            bindings = <&tog 3>;
            key-positions = <0 1>;
            layers = <0 3>;
        };

        toggleNum {
            bindings = <&tog 1>;
            key-positions = <8 9>;
            layers = <0 1>;
        };

        n0 {
            bindings = <&kp NUMBER_0>;
            key-positions = <13 34>;
        };

        n1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <16 35>;
        };

        n2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <3 34>;
        };

        n3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <6 35>;
        };

        n4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <34 2>;
        };

        n5 {
            bindings = <&kp NUMBER_5>;
            key-positions = <35 7>;
        };

        n6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <34 1>;
        };

        n7 {
            bindings = <&kp NUMBER_7>;
            key-positions = <35 8>;
        };

        n8 {
            bindings = <&kp NUMBER_8>;
            key-positions = <34 0>;
        };

        n9 {
            bindings = <&kp KP_NUMBER_9>;
            key-positions = <35 9>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        rus: rus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 5>;
            label = "RUS";
        };

        eng: eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 0>;
            label = "ENG";
        };

        ctrlBackspace: ctrlDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(BACKSPACE)>;
            label = "CTRLDEL";
        };

        homeBackspace: homeBackspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp HOME>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp DELETE>;

            label = "HOMEBACKSPACE";
        };

        endDel: endDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp END>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp DELETE>;

            label = "ENDDEL";
        };

        homeEndDel: homeEndDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp HOME>,
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp END>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp DELETE>;

            label = "HOMEENDDEL";
        };

        ctrlDel2: ctrlDel2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DELETE)>;
            label = "CTRLDEL2";
        };

        play_pause: play_pause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(KP_SUBTRACT))>;
            label = "PLAY_PAUSE";
        };

        toggle_toggl: toggle_toggl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(KP_NUMBER_0)>;
            label = "TOGGLE_TOGGL";
        };

        release_mod: release_mod {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp LEFT_SHIFT &kp RIGHT_SHIFT &kp LEFT_CONTROL &kp RIGHT_CONTROL &kp LEFT_ALT &kp RIGHT_ALT &kp LEFT_WIN &kp RIGHT_WIN>,
                <&macro_tap>,
                <&to 0>;

            label = "RELEASE_MOD";
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>;
            flavor = "balanced";
            hold-trigger-on-release;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 32 33 34>;
        };

        enter_shift: enter_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25>;
        };

        hml_layer: hml_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_LAYER";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 32 33 34>;
        };

        bal_nav: bal_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "BAL_NAV";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 13 12 11 10 0 1 2 3 4 10 11 12 13 14 22 25 20 21>;
            hold-trigger-on-release;
        };

        hold_nav: hold_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_NAV";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            hold-trigger-key-positions = <5 6 8 9 15 16 17 18 19 26 27 28 29 30 31 7 2 20 21 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25>;
            hold-trigger-on-release;
        };

        hml_hold: hml_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 32 33 34>;
            hold-while-undecided;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
       &bal_nav 7 Q           &hml LA(LCTRL) W      &hml LS(LEFT_ALT) F       &hml LC(LEFT_SHIFT) P   &hml LS(LA(LCTRL)) B    &hmr RS(RA(RCTRL)) J  &hmr RC(RIGHT_SHIFT) L  &hmr RS(RIGHT_ALT) U  &hmr RA(RCTRL) Y  &kp Z
       &hml LEFT_WIN A        &hml_hold LEFT_ALT A  &hml_hold LEFT_CONTROL S  &hml_hold LEFT_SHIFT T  &kp G                   &kp M                 &hmr RIGHT_SHIFT N      &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RIGHT_WIN O
&kp Q  &hold_nav 1 SEMICOLON  &bal_nav 4 X          &bal_nav 3 C              &bal_nav 1 D            &kp V                   &kp K                 &kp H                   &hold_nav 10 COMMA    &kp DOT           &kp FSLH          &kp BSLH
                                                    &hold_nav 10 TAB          &hold_nav 1 ESCAPE      &hold_nav 6 ENTER       &bal_nav 3 SPACE      &lt 4 BACKSPACE         &lt 3 DEL
            >;
        };

        numbers {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "num";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &trans        &trans        &trans            &trans          &trans           &kp KP_DIVIDE    &kp N7        &kp N8        &kp N9        &kp KP_SUBTRACT
        &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &toggle_toggl    &kp KP_MULTIPLY  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS
&trans  &kp LC(Z)     &kp LC(X)     &kp LC(C)         &kp LC(V)       &kp LC(Y)        &trans           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD       &trans
                                    &trans            &trans          &trans           &kp NUMBER_0     &trans        &trans
            >;
        };

        symbols {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans     &kp MINUS       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS
        &trans  &trans  &trans  &trans  &trans    &trans     &kp SQT         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EQUAL          &trans
                        &trans  &trans  &trans    &kp SPACE  &trans          &trans
            >;

            label = "symb";
        };

        nav {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp C_VOLUME_UP  &play_pause     &mkp MB2        &kp PRINTSCREEN  &kp CLCK
        &trans  &trans  &trans  &trans  &trans    &kp C_VOL_DN     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW     &kp RIGHT
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_MUTE       &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP      &kp END    &trans
                        &trans  &trans  &trans    &trans           &trans          &trans
            >;

            label = "nav";
        };

        F1_F12 {
            bindings = <
        &trans        &trans        &trans     &trans          &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10
        &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans        &trans        &trans     &trans          &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                    &trans     &trans          &trans    &trans  &trans  &trans
            >;

            label = "f1f12";
        };

        qwerty {
            bindings = <
        &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O       &kp P
        &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L       &kp SEMICOLON
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp SLASH      &kp SQT
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "qwe";
        };

        shift {
            bindings = <
        &kp LS(Q)  &kp LS(W)  &kp LS(F)  &kp LS(P)  &kp LS(B)    &kp LS(J)  &kp LS(L)  &kp LS(U)      &kp LS(Y)         &kp COLON
        &kp LS(A)  &kp LS(R)  &kp LS(S)  &kp LS(T)  &kp LS(G)    &kp LS(M)  &kp LS(N)  &kp LS(E)      &kp LS(I)         &kp LS(O)
&trans  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(D)  &kp LS(V)    &kp LS(K)  &kp LS(H)  &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION  &trans
                              &trans     &trans     &trans       &trans     &trans     &trans
            >;

            label = "shift";
        };

        left_nav {
            bindings = <
        &trans  &kp LEFT  &kp UP_ARROW  &kp RIGHT      &kp PAGE_UP      &trans  &trans  &trans  &trans  &trans
        &trans  &kp HOME  &kp DOWN      &kp END        &kp PAGE_DOWN    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans        &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
                          &trans        &kp BACKSPACE  &kp DELETE       &trans  &trans  &trans
            >;

            label = "left_nav";
        };

        left_misc {
            bindings = <
        &trans  &trans            &trans             &trans         &trans         &trans  &trans  &trans  &trans  &trans
        &trans  &trans            &trans             &trans         &trans         &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &play_pause    &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans             &trans         &kp SPACE      &trans  &trans  &trans
            >;

            label = "left_misc";
        };

        media_nav {
            bindings = <
        &trans  &kp LS(LC(FSLH))  &play_pause  &kp LS(LC(ASTRK))  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans            &trans       &trans             &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans            &trans       &trans             &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans       &trans             &trans    &trans  &trans  &trans
            >;

            label = "mediaNav";
        };

        left_num {
            bindings = <
        &kp SLASH        &kp N7        &kp N8        &kp N9        &kp MINUS            &trans     &trans  &trans  &trans  &trans
        &kp ASTERISK     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS             &trans     &trans  &trans  &trans  &trans
&trans  &kp KP_NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD           &trans     &trans  &trans  &trans  &trans  &trans
                                       &trans        &trans        &hold_nav 6 ENTER    &kp SPACE  &trans  &trans
            >;

            label = "leftNun";
        };
    };
};
