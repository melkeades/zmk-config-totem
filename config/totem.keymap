//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        rus {
            bindings = <&rus>;
            key-positions = <20 31>;
            layers = <0>;
        };

        eng {
            bindings = <&eng>;
            key-positions = <20 31>;
            layers = <5>;
        };

        LeftBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            layers = <0>;
        };

        RightBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            layers = <0>;
        };

        LeftParenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            layers = <0>;
        };

        RightParenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        LeftBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            layers = <0>;
        };

        RightBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <27 28>;
            layers = <0>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <1 2>;
            layers = <0>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <22 23>;
            layers = <0>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <28 29>;
            layers = <0>;
        };

        QuoteDouble {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <11 13>;
            layers = <0>;
        };

        Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <16 18>;
            layers = <0>;
        };

        QuestionMark {
            bindings = <&kp QUESTION>;
            key-positions = <1 3>;
            layers = <0>;
        };

        Exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <6 8>;
            layers = <0>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <22 24>;
            layers = <0>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <27 29>;
            layers = <0>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <11 12 13>;
            layers = <0>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <16 17 18>;
            layers = <0>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <12 3>;
            layers = <0>;
        };

        AtSign {
            bindings = <&kp AT>;
            key-positions = <6 17>;
            layers = <0>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <11 23>;
            layers = <0>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <28 18>;
            layers = <0>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <23 13>;
            layers = <0>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <16 28>;
            layers = <0>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <1 12>;
            layers = <0>;
        };

        ctrlDel {
            bindings = <&ctrlDel2>;
            key-positions = <11 12>;
            layers = <0>;
        };

        ctrlBackspace {
            bindings = <&ctrlBackspace>;
            key-positions = <17 18>;
            layers = <0>;
        };

        endDel {
            bindings = <&endDel>;
            key-positions = <10 11 12>;
            layers = <0>;
        };

        homeBackspace {
            bindings = <&homeBackspace>;
            key-positions = <17 18 19>;
            layers = <0>;
        };

        homeEndDel {
            bindings = <&homeEndDel>;
            key-positions = <11 12 17 18>;
            layers = <0>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        rus: rus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 5>;
            label = "RUS";
        };

        eng: eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 0>;
            label = "ENG";
        };

        ctrlBackspace: ctrlDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(BACKSPACE)>;
            label = "CTRLDEL";
        };

        homeBackspace: homeBackspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp HOME>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp DELETE>;

            label = "HOMEBACKSPACE";
        };

        endDel: endDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp END>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp DELETE>;

            label = "ENDDEL";
        };

        homeEndDel: homeEndDel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp HOME>,
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp END>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp DELETE>;

            label = "HOMEENDDEL";
        };

        ctrlDel2: ctrlDel2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DELETE)>;
            label = "CTRLDEL2";
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>;
            flavor = "balanced";
            hold-trigger-on-release;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 32 33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
       &kp Q            &kp W            &kp F         &kp P              &kp B          &kp J      &kp L               &kp U                 &kp Y             &kp SEMI
       &hml LEFT_WIN A  &hml LEFT_ALT R  &hml LCTRL S  &hml LEFT_SHIFT T  &kp G          &kp M      &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RIGHT_WIN O
&kp Q  &kp Z            &kp X            &kp C         &kp D              &kp V          &kp K      &kp H               &kp COMMA             &kp DOT           &kp FSLH          &kp BSLH
                                         &kp TAB       &lt 1 ESCAPE       &lt 0 ENTER    &kp SPACE  &lt 0 BACKSPACE     &lt 0 DEL
            >;
        };

        numbers {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "NAVI";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &trans        &trans        &trans            &trans          &trans    &kp KP_DIVIDE    &kp N7        &kp N8        &kp N9        &kp KP_SUBTRACT
        &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans    &kp KP_MULTIPLY  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS
&trans  &trans        &trans        &trans            &trans          &trans    &trans           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans           &trans
                                    &trans            &trans          &trans    &kp NUMBER_0     &trans        &trans
            >;
        };

        symbols {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans     &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &kp SPACE  &trans  &trans
            >;
        };

        nav {
            bindings = <
        &trans     &trans     &trans     &trans     &trans    &trans        &trans          &trans          &trans        &trans
        &trans     &trans     &trans     &trans     &trans    &kp CAPSLOCK  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans    &kp INSERT    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &trans
                              &trans     &trans     &trans    &trans        &trans          &trans
            >;
        };

        F1_F12 {
            bindings = <
        &trans        &trans        &trans     &trans          &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10
        &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans        &trans        &trans     &trans          &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                    &trans     &trans          &trans    &trans  &trans  &trans
            >;
        };

        qwerty {
            bindings = <
        &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O       &kp P
        &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L       &kp SEMICOLON
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp SLASH      &kp SQT
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
